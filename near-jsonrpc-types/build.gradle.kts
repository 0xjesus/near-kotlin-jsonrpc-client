plugins {
    kotlin("jvm")
    kotlin("plugin.serialization")
    id("org.openapi.generator") version "7.2.0"
    id("de.undercouch.download") version "5.6.0"
    id("maven-publish")
}
val rawGeneratedDir = layout.buildDirectory.dir("generated-raw")



dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2")
    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    
    testImplementation(kotlin("test"))
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.1")
    testImplementation("io.mockk:mockk:1.13.8")
}

tasks.test {
    useJUnitPlatform()
}

val specFile = layout.buildDirectory.file("openapi/openapi.json")
val patchedSpecFile = layout.buildDirectory.file("openapi/openapi-patched.json")
val fixedGeneratedDir = layout.buildDirectory.dir("generated-fixed")

val downloadOpenApiSpec by tasks.registering(de.undercouch.gradle.tasks.download.Download::class) {
    src("https://raw.githubusercontent.com/near/nearcore/master/chain/jsonrpc/openapi/openapi.json")
    dest(specFile)
    overwrite(true)
}

fun removeInvalidFields(obj: Any?): Any? = when (obj) {
    is MutableMap<*, *> -> {
        obj.remove("\$schema")
        obj.remove("patternProperties")
        obj.mapValues { (_, v) -> removeInvalidFields(v) }.toMutableMap()
    }
    is MutableList<*> -> obj.map { removeInvalidFields(it) }.toMutableList()
    else -> obj
}

val patchOpenApiSpec by tasks.registering {
    dependsOn(downloadOpenApiSpec)
    inputs.file(specFile)
    outputs.file(patchedSpecFile)
    
    doLast {
        val json = groovy.json.JsonSlurper().parseText(specFile.get().asFile.readText()) as MutableMap<String, Any>
        (json["paths"] as? MutableMap<String, Any>)?.let {
            val all = mutableMapOf<String, Any>()
            it.values.forEach { p -> if (p is Map<*, *>) all.putAll(p as Map<String, Any>) }
            it.clear()
            it["/"] = all
        }
        removeInvalidFields(json)
        patchedSpecFile.get().asFile.writeText(groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(json)))
    }
}

openApiGenerate {
    generatorName.set("kotlin")
    inputSpec.set(patchedSpecFile.get().asFile.absolutePath)
    outputDir.set(rawGeneratedDir.get().asFile.absolutePath)
    packageName.set("org.near.jsonrpc.types")
    validateSpec.set(false)
    configOptions.set(mapOf(
        "library" to "jvm-okhttp4",
        "serializationLibrary" to "kotlinx_serialization",
        "enumPropertyNaming" to "UPPERCASE"
    ))
    globalProperties.set(mapOf("models" to "", "apis" to "false"))
}

tasks.named("openApiGenerate") {
    dependsOn(patchOpenApiSpec)
}

val fixAndCopyGenerated by tasks.registering(Copy::class) {
    dependsOn(tasks.named("openApiGenerate"))
    from(rawGeneratedDir)
    into(fixedGeneratedDir)
    
    doLast {
        exec {
            workingDir = project.rootDir
            commandLine("python3", "scripts/fix_generated.py", fixedGeneratedDir.get().asFile.absolutePath)
        }
    }
}

kotlin.sourceSets["main"].kotlin.srcDir(fixedGeneratedDir.map { it.dir("src/main/kotlin") })

tasks.named("compileKotlin") {
    dependsOn(fixAndCopyGenerated)
}

publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            from(components["java"])
            groupId = "io.github.0xjesus"
            artifactId = "near-jsonrpc-types"  // <-- Cambiar aquÃ­
            version = "0.1.0-SNAPSHOT"
            // ... mismo pom que antes
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/0xjesus/near-kotlin-jsonrpc-client")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

kotlin.sourceSets.getByName("main").kotlin.srcDir("$buildDir/generated-fixed/src/main/kotlin")
tasks.register<Exec>("postGenPatch") {
    group = "codegen"
    workingDir = rootProject.projectDir
    commandLine("python3", "scripts/patch_types_ultra.py", "$buildDir/generated-fixed/src/main/kotlin/org/near/jsonrpc/types/models")
    isIgnoreExitValue = false
    inputs.dir("$buildDir/generated-fixed/src/main/kotlin/org/near/jsonrpc/types/models")
    outputs.upToDateWhen { false }
}
tasks.named("postGenPatch") {
    mustRunAfter("fixAndCopyGenerated")
}
tasks.named("compileKotlin") {
    dependsOn("fixAndCopyGenerated", "postGenPatch")
}
